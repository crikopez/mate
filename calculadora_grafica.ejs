<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= titulo %> - MATHPRO</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6; /* Light gray background */
        }
        canvas {
            border: 1px solid #cbd5e1; /* border-slate-300 */
            background-color: #ffffff;
            touch-action: none; /* Disable default touch actions for custom pan/zoom */
        }
    </style>
</head>
<body class="flex flex-col items-center justify-center min-h-screen p-4">
    <div class="bg-white p-8 rounded-xl shadow-lg w-full max-w-4xl text-center">
        <h1 class="text-3xl font-bold text-blue-700 mb-6">Calculadora Gráfica</h1>
        <p class="text-gray-600 mb-4">Introduce una función de 'x' (ej. `x^2`, `sin(x)`, `2*x + 3`).</p>
        <p class="text-sm text-gray-500 mb-4">La multiplicación implícita (ej. `2x`, `x(x+1)`) se intentará interpretar, pero usa `*` para mayor precisión.</p>

        <div class="flex flex-col md:flex-row items-center justify-center gap-4 mb-6">
            <input
                type="text"
                id="functionInput"
                placeholder="y = x^2 + 2x - 1"
                value="x^2"
                class="w-full md:w-2/3 px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-800 text-lg"
            >
            <button
                id="graphButton"
                class="w-full md:w-1/3 bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg transition duration-300 ease-in-out transform hover:scale-105 shadow-md"
            >
                Graficar
            </button>
        </div>

        <div id="errorMessage" class="text-red-600 font-semibold mb-4 hidden"></div>

        <canvas id="graphCanvas" class="rounded-lg shadow-inner"></canvas>

        <div class="flex flex-wrap justify-center gap-4 mt-6">
            <button id="zoomInButton" class="bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded-lg transition duration-300 ease-in-out transform hover:scale-105 shadow-sm">
                Zoom In (+)
            </button>
            <button id="zoomOutButton" class="bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded-lg transition duration-300 ease-in-out transform hover:scale-105 shadow-sm">
                Zoom Out (-)
            </button>
            <button id="resetViewButton" class="bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded-lg transition duration-300 ease-in-out transform hover:scale-105 shadow-sm">
                Restablecer Vista
            </button>
        </div>

        <div class="mt-8">
            <a href="/" class="text-blue-600 hover:text-blue-800 font-medium text-lg transition duration-300 ease-in-out">
                Volver al Inicio
            </a>
        </div>
    </div>

    <script>
        const canvas = document.getElementById('graphCanvas');
        const ctx = canvas.getContext('2d');
        const functionInput = document.getElementById('functionInput');
        const graphButton = document.getElementById('graphButton');
        const zoomInButton = document.getElementById('zoomInButton');
        const zoomOutButton = document.getElementById('zoomOutButton');
        const resetViewButton = document.getElementById('resetViewButton');
        const errorMessage = document.getElementById('errorMessage');

        let scale = 50; // Pixels per unit (e.g., 50px = 1 unit on the axis)
        let offsetX = 0; // X position of the origin on the canvas (calculated dynamically)
        let offsetY = 0; // Y position of the origin on the canvas (calculated dynamically)

        // Function to display error messages
        function showError(message) {
            errorMessage.textContent = message;
            errorMessage.classList.remove('hidden');
        }

        // Function to hide error messages
        function hideError() {
            errorMessage.classList.add('hidden');
            errorMessage.textContent = '';
        }

        // Function to parse the mathematical expression safely (limited)
        // Replaces common operators and functions with their Math equivalents.
        // WARNING: Although it uses new Function instead of direct eval,
        // executing user code still carries a risk.
        // For production applications, a robust parsing library is recommended.
        function parseFunction(expression) {
            // Convert to lowercase for consistent handling
            expression = expression.toLowerCase();

            // Replace constants and power operators
            expression = expression.replace(/pi/g, 'Math.PI');
            expression = expression.replace(/e/g, 'Math.E');
            expression = expression.replace(/\^/g, '**'); // JavaScript uses ** for power

            // Replace common mathematical functions
            expression = expression.replace(/sin\(/g, 'Math.sin(');
            expression = expression.replace(/cos\(/g, 'Math.cos(');
            expression = expression.replace(/tan\(/g, 'Math.tan(');
            expression = expression.replace(/log\(/g, 'Math.log('); // Natural logarithm
            expression = expression.replace(/sqrt\(/g, 'Math.sqrt(');
            expression = expression.replace(/abs\(/g, 'Math.abs(');

            // Handle implicit multiplications (order is important)
            // 1. Number followed by variable (e.g., 2x -> 2*x)
            expression = expression.replace(/(\d+)([a-z])/g, '$1*$2');
            // 2. Number followed by parenthesis (e.g., 2(x+1) -> 2*(x+1))
            expression = expression.replace(/(\d+)\(/g, '$1*(');
            // 3. Variable followed by parenthesis (e.g., x(x+1) -> x*(x+1))
            expression = expression.replace(/([a-z])\(/g, '$1*(');
            // 4. Parenthesis followed by number (e.g., (x+1)2 -> (x+1)*2)
            expression = expression.replace(/\)(\d+)/g, ')*$1');
            // 5. Parenthesis followed by variable (e.g., (x+1)x -> (x+1)*x)
            expression = expression.replace(/\)([a-z])/g, ')*$1');
            // 6. Variable followed by variable (e.g., xx -> x*x) - only for 'x'
            expression = expression.replace(/([a-z])([a-z])/g, '$1*$2');


            // Remove trailing spaces before evaluation
            expression = expression.replace(/\s/g, '');

            try {
                // Creates a new function from the string. This is safer than direct eval().
                // 'x' is the argument of the function.
                return new Function('x', 'return ' + expression);
            } catch (e) {
                showError('Error al parsear la función: ' + e.message);
                return null;
            }
        }

        // Draws the X and Y axes and the grid
        function drawAxes() {
            ctx.clearRect(0, 0, canvas.width, canvas.height); // Clears the canvas

            // Draw light grid
            ctx.strokeStyle = '#e2e8f0'; // slate-200 for light grid
            ctx.lineWidth = 0.5;

            // Vertical grid lines
            for (let i = -offsetX % scale; i <= canvas.width; i += scale) {
                ctx.beginPath();
                ctx.moveTo(i, 0);
                ctx.lineTo(i, canvas.height);
                ctx.stroke();
            }
            // Horizontal grid lines
            for (let i = -offsetY % scale; i <= canvas.height; i += scale) {
                ctx.beginPath();
                ctx.moveTo(0, i);
                ctx.lineTo(canvas.width, i);
                ctx.stroke();
            }

            // Draw main axes
            ctx.beginPath();
            ctx.strokeStyle = '#94a3b8'; // slate-400
            ctx.lineWidth = 1;

            // X axis
            ctx.moveTo(0, offsetY);
            ctx.lineTo(canvas.width, offsetY);
            ctx.stroke();

            // Y axis
            ctx.moveTo(offsetX, 0);
            ctx.lineTo(offsetX, canvas.height);
            ctx.stroke();

            // Draw axis ticks and labels
            ctx.font = '10px Inter';
            ctx.fillStyle = '#64748b'; // slate-600

            // X axis ticks and labels
            for (let i = -offsetX; i <= canvas.width - offsetX; i += scale) {
                if (i !== 0) {
                    ctx.fillText(Math.round(i / scale), offsetX + i - 5, offsetY + 15);
                }
            }

            // Y axis ticks and labels
            for (let i = -offsetY; i <= canvas.height - offsetY; i += scale) {
                if (i !== 0) {
                    ctx.fillText(Math.round(-i / scale), offsetX + 8, offsetY + i + 5);
                }
            }

            // Axis labels (X and Y) and origin
            ctx.fillStyle = '#1e293b'; // slate-800
            ctx.font = '14px Inter';
            ctx.fillText('X', canvas.width - 20, offsetY + 20);
            ctx.fillText('Y', offsetX - 20, 20);
            ctx.fillText('0', offsetX + 8, offsetY + 15); // Origin
        }

        // Draws the function graph
        function drawGraph(func) {
            if (!func) return;

            drawAxes(); // Redraw axes and grid

            ctx.beginPath();
            ctx.strokeStyle = '#3b82f6'; // blue-500
            ctx.lineWidth = 2;

            // Calculate the visible X range in mathematical units
            const xMin = -offsetX / scale;
            const xMax = (canvas.width - offsetX) / scale;

            // Iterate through canvas pixels
            for (let i = 0; i < canvas.width; i++) {
                // Convert pixel coordinate 'i' to an 'x' coordinate in the graph system
                const x = (i - offsetX) / scale;
                let y;

                try {
                    y = func(x); // Evaluate the function for the x value
                } catch (e) {
                    // If there's an error in evaluation (e.g., log(0), sqrt(-1)), skip this point
                    continue;
                }

                // Convert the 'y' coordinate from the graph system to a pixel coordinate on the canvas
                const canvasY = offsetY - (y * scale);

                if (i === 0) {
                    ctx.moveTo(i, canvasY);
                } else {
                    // Only draw if the Y point is within canvas limits
                    // or if the line comes from a point that was within to avoid jumps
                    if (canvasY >= -1000 && canvasY <= canvas.height + 1000) { // A little margin
                        ctx.lineTo(i, canvasY);
                    } else {
                        // If the point is far out, move the pen to avoid lines across the canvas
                        ctx.moveTo(i, canvasY);
                    }
                }
            }
            ctx.stroke();
        }

        // Function to resize the canvas and redraw the graph
        function resizeAndRedraw() {
            const container = canvas.parentElement;
            canvas.width = container.clientWidth * 0.95; // 95% of parent width
            canvas.height = canvas.width * (3 / 4); // Maintain 4:3 aspect ratio

            // Recalculate offsets to keep the center of the view
            offsetX = canvas.width / 2;
            offsetY = canvas.height / 2;

            const currentExpression = functionInput.value;
            const currentFunc = parseFunction(currentExpression);
            if (currentFunc) {
                drawGraph(currentFunc);
            } else {
                drawAxes(); // If no function, just draw axes
            }
        }

        // Event listener for the Graph button
        graphButton.addEventListener('click', () => {
            hideError();
            const expression = functionInput.value;
            const func = parseFunction(expression);
            if (func) {
                drawGraph(func);
            }
        });

        // Event listeners for Zoom buttons
        zoomInButton.addEventListener('click', () => {
            scale *= 1.2; // Increase scale (zoom in)
            const expression = functionInput.value;
            const func = parseFunction(expression);
            if (func) {
                drawGraph(func);
            }
        });

        zoomOutButton.addEventListener('click', () => {
            scale /= 1.2; // Decrease scale (zoom out)
            const expression = functionInput.value;
            const func = parseFunction(expression);
            if (func) {
                drawGraph(func);
            }
        });

        resetViewButton.addEventListener('click', () => {
            scale = 50; // Reset scale
            offsetX = canvas.width / 2; // Reset X origin
            offsetY = canvas.height / 2; // Reset Y origin
            const expression = functionInput.value;
            const func = parseFunction(expression);
            if (func) {
                drawGraph(func);
            } else {
                drawAxes(); // If no function, just draw axes
            }
        });

        // Handle dragging for panning
        let isDragging = false;
        let lastX, lastY;

        canvas.addEventListener('mousedown', (e) => {
            isDragging = true;
            lastX = e.clientX;
            lastY = e.clientY;
            canvas.style.cursor = 'grabbing';
        });

        canvas.addEventListener('mousemove', (e) => {
            if (isDragging) {
                const dx = e.clientX - lastX;
                const dy = e.clientY - lastY;
                offsetX += dx;
                offsetY += dy;
                lastX = e.clientX;
                lastY = e.clientY;
                const expression = functionInput.value;
                const func = parseFunction(expression);
                if (func) {
                    drawGraph(func);
                } else {
                    drawAxes();
                }
            }
        });

        canvas.addEventListener('mouseup', () => {
            isDragging = false;
            canvas.style.cursor = 'grab';
        });

        canvas.addEventListener('mouseout', () => {
            isDragging = false;
            canvas.style.cursor = 'default';
        });

        // Handle mouse wheel zoom
        canvas.addEventListener('wheel', (e) => {
            e.preventDefault(); // Prevent page scrolling
            const zoomFactor = 1.1; // Zoom factor
            const rect = canvas.getBoundingClientRect();
            const mouseX = e.clientX - rect.left;
            const mouseY = e.clientY - rect.top;

            // Calculate the point in the coordinate system before zooming
            const xBeforeZoom = (mouseX - offsetX) / scale;
            const yBeforeZoom = (mouseY - offsetY) / scale;

            if (e.deltaY < 0) { // Zoom in (wheel up)
                scale *= zoomFactor;
            } else { // Zoom out (wheel down)
                scale /= zoomFactor;
            }

            // Adjust offset so the point under the mouse remains fixed
            offsetX = mouseX - xBeforeZoom * scale;
            offsetY = mouseY - yBeforeZoom * scale;

            const expression = functionInput.value;
            const func = parseFunction(expression);
            if (func) {
                drawGraph(func);
            } else {
                drawAxes();
            }
        });

        // Initialize graph on window load and handle resizing
        window.onload = function() {
            resizeAndRedraw(); // Set initial size and draw default graph
            window.addEventListener('resize', resizeAndRedraw); // Add resize listener
        };
    </script>
</body>
</html>