<!DOCTYPE html>
<html lang="es" class="<%= typeof isDarkMode !== 'undefined' && isDarkMode ? 'dark' : '' %>">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= titulo %> - MATHPRO</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        // Configuración de Tailwind para usar colores y fuentes personalizados
        tailwind.config = {
            darkMode: 'class', // Habilita el modo oscuro basado en la clase 'dark'
            theme: {
                extend: {
                    fontFamily: {
                        inter: ['Inter', 'sans-serif'], // Define la fuente Inter
                    },
                    colors: {
                        // Define una paleta de colores personalizada si lo deseas
                        primary: '#4F46E5', // Indigo 600
                        secondary: '#8B5CF6', // Violet 500
                    },
                    animation: {
                        // Define las animaciones personalizadas
                        'pulse-custom': 'pulse 1.5s cubic-bezier(0.4, 0, 0.6, 1) infinite',
                        'bounce-dot': 'bounceDot 0.6s infinite alternate', /* Animación para los puntos de carga */
                    },
                    animationDelay: { // Custom animation delays
                        '0': '0s',
                        '100': '0.1s',
                        '150': '0.15s',
                        '200': '0.2s',
                        '300': '0.3s',
                        '400': '0.4s',
                        '500': '0.5s',
                        '600': '0.6s',
                        '700': '0.7s',
                        '800': '0.8s',
                        '900': '0.9s',
                        '1000': '1s',
                    }
                }
            }
        }
    </script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6; /* Light gray background */
            transition: background-color 0.3s ease; /* Transición suave para el fondo del body */
        }
        .dark body {
            background-color: #1f2937; /* Dark gray background */
        }
        .chat-container {
            height: 400px;
            overflow-y: auto;
            border: 1px solid #e2e8f0; /* slate-200 */
            border-radius: 0.5rem;
            padding: 1rem;
            background-color: #ffffff;
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
            transition: background-color 0.3s ease, border-color 0.3s ease;
        }
        .dark .chat-container {
            background-color: #374151; /* Darker gray for chat container */
            border-color: #4b5563; /* Darker border */
        }
        .message {
            max-width: 80%;
            padding: 0.75rem;
            border-radius: 0.75rem;
            word-wrap: break-word;
        }
        .user-message {
            background-color: #bfdbfe; /* blue-200 */
            align-self: flex-end;
            text-align: right;
        }
        .dark .user-message {
            background-color: #60a5fa; /* blue-400 */
            color: #ffffff;
        }
        .bot-message {
            background-color: #d1fae5; /* green-100 */
            align-self: flex-start;
            text-align: left;
        }
        .dark .bot-message {
            background-color: #34d399; /* green-500 */
            color: #ffffff;
        }
        .loading-indicator {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 20px;
        }
        .loading-dot {
            width: 8px;
            height: 8px;
            background-color: #60a5fa; /* blue-400 */
            border-radius: 50%;
            margin: 0 2px;
            animation: bounceDot 0.6s infinite alternate; /* Usar la animación definida en tailwind.config */
        }
        .dark .loading-dot {
            background-color: #93c5fd; /* blue-300 */
        }
        .loading-dot:nth-child(2) {
            animation-delay: 0.2s;
        }
        .loading-dot:nth-child(3) {
            animation-delay: 0.4s;
        }
        @keyframes bounceDot { /* Renombrado para evitar conflicto con bounceIn de layout.ejs */
            0% { transform: translateY(0); }
            100% { transform: translateY(-5px); }
        }

        /* Estilos para la barra de desplazamiento en modo oscuro */
        .dark ::-webkit-scrollbar { width: 8px; }
        .dark ::-webkit-scrollbar-track { background: #4B5563; border-radius: 10px; }
        .dark ::-webkit-scrollbar-thumb { background: #6B7280; border-radius: 10px; }
        .dark ::-webkit-scrollbar-thumb:hover { background: #9CA3AF; }
    </style>
</head>
<body class="flex flex-col items-center justify-center min-h-screen p-4">
    <div class="bg-white dark:bg-gray-800 p-8 rounded-xl shadow-xl w-full max-w-2xl text-center transition-colors duration-300">
        <div class="flex justify-between items-center mb-6">
            <h1 class="text-3xl font-bold text-purple-700 dark:text-purple-400">Chatbot Matemático</h1>
            <!-- Botón de Modo Oscuro -->
            <button id="darkModeToggle" class="p-3 rounded-full bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 transform hover:scale-110" aria-label="Toggle dark mode">
                <!-- Icono de sol/luna, se actualizará con JS -->
                <svg class="w-6 h-6 sun-icon" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 4a1 1 0 011 1v1a1 1 0 11-2 0V7a1 1 0 011-1zm-4 8a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zm-4-4a1 1 0 011 1v1a1 1 0 11-2 0V7a1 1 0 011-1zm10.293-2.293a1 1 0 010 1.414l-1 1a1 1 0 11-1.414-1.414l1-1a1 1 0 011.414 0zM5.707 14.293a1 1 0 010-1.414l1-1a1 1 0 10-1.414-1.414l-1 1a1 1 0 011.414 1.414zM16 10a1 1 0 01-1 1h-1a1 1 0 110-2h1a1 1 0 011 1zM3 10a1 1 0 01-1 1H1a1 1 0 110-2h1a1 1 0 011 1z" clip-rule="evenodd"></path></svg>
                <svg class="w-6 h-6 moon-icon hidden" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path></svg>
            </button>
        </div>
        
        <p class="text-gray-600 dark:text-gray-300 mb-4 transition-colors duration-300">Pregúntame cualquier cosa sobre matemáticas (álgebra, cálculo, geometría, etc.).</p>

        <div id="chatContainer" class="chat-container mb-6">
            <!-- Mensajes del chat se insertarán aquí -->
        </div>

        <div id="loadingIndicator" class="loading-indicator mb-4 hidden">
            <div class="loading-dot"></div>
            <div class="loading-dot"></div>
            <div class="loading-dot"></div>
        </div>

        <div class="flex gap-4">
            <input
                type="text"
                id="userMessageInput"
                placeholder="Escribe tu pregunta aquí..."
                class="flex-grow px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 text-gray-800 dark:text-gray-100 bg-white dark:bg-gray-700 text-lg shadow-sm transition-colors duration-300"
                onkeypress="if(event.keyCode === 13) sendMessage()"
            >
            <button
                id="sendMessageButton"
                class="bg-purple-600 hover:bg-purple-700 text-white font-bold py-3 px-6 rounded-lg transition duration-300 ease-in-out transform hover:scale-105 shadow-lg"
                onclick="sendMessage()"
            >
                Enviar
            </button>
        </div>

        <div class="mt-8">
            <a href="/" class="text-purple-600 dark:text-purple-400 hover:text-purple-800 dark:hover:text-purple-300 font-medium text-lg transition-colors duration-300 ease-in-out">
                Volver al Inicio
            </a>
        </div>
    </div>

    <script>
        const chatContainer = document.getElementById('chatContainer');
        const userMessageInput = document.getElementById('userMessageInput');
        const loadingIndicator = document.getElementById('loadingIndicator');
        const darkModeToggle = document.getElementById('darkModeToggle');
        const htmlElement = document.documentElement; // Referencia al elemento <html>

        // Función para aplicar el modo oscuro
        function applyDarkMode(isDark) {
            if (isDark) {
                htmlElement.classList.add('dark');
                localStorage.setItem('chatbot_dark_mode', 'true');
                // Ocultar icono de sol, mostrar icono de luna
                darkModeToggle.querySelector('.sun-icon').classList.add('hidden');
                darkModeToggle.querySelector('.moon-icon').classList.remove('hidden');
            } else {
                htmlElement.classList.remove('dark');
                localStorage.setItem('chatbot_dark_mode', 'false');
                // Mostrar icono de sol, ocultar icono de luna
                darkModeToggle.querySelector('.sun-icon').classList.remove('hidden');
                darkModeToggle.querySelector('.moon-icon').classList.add('hidden');
            }
        }

        // Cargar preferencia de modo oscuro al iniciar
        const savedDarkMode = localStorage.getItem('chatbot_dark_mode');
        if (savedDarkMode === 'true') {
            applyDarkMode(true);
        } else if (savedDarkMode === null && window.matchMedia('(prefers-color-scheme: dark)').matches) {
            // Si no hay preferencia guardada, pero el sistema prefiere oscuro
            applyDarkMode(true);
        } else {
            applyDarkMode(false);
        }

        // Event listener para el botón de modo oscuro
        darkModeToggle.addEventListener('click', () => {
            applyDarkMode(!htmlElement.classList.contains('dark'));
        });


        // Función para añadir un mensaje al chat
        function addMessage(message, sender) {
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('message');
            if (sender === 'user') {
                messageDiv.classList.add('user-message');
            } else {
                messageDiv.classList.add('bot-message');
            }
            messageDiv.textContent = message;
            chatContainer.appendChild(messageDiv);
            chatContainer.scrollTop = chatContainer.scrollHeight; // Auto-scroll al final
        }

        // Función para enviar el mensaje del usuario
        async function sendMessage() {
            const message = userMessageInput.value.trim();
            if (message === '') return;

            console.log('Enviando mensaje:', message);   

            addMessage(message, 'user');
            userMessageInput.value = '';
            loadingIndicator.classList.remove('hidden'); // Mostrar indicador de carga

            try { 

                

                let urlchat  = 'https://openrouter.ai/api/v1/chat/completions'; 

                
                // Aquí deberías hacer la llamada a tu backend para el chatbot.
                // Esta es una URL de ejemplo, ajústala a tu configuración real.
                const response = await fetch(urlchat, { // Asumiendo que tu backend expone /api/chat
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                         'Authorization': `Bearer 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`
                    },
                     body: JSON.stringify({
                // The 'model' name would be specific to openroute.ai
                // e.g., "openroute-chat-v1", "ors-llm-standard", etc.
                model: "deepseek/deepseek-r1-0528:free", 
                messages: [  
                    { role: "system", content: "soy un robot ayuda matematica bachillerato" },
                    { role: "user", content: message }
                ],
                temperature: 0.7, // Creativity of the response (0.0 to 1.0)
                max_tokens: 200   // Maximum length of the generated response
            })
                });

                const data = await response.json(); 


                addMessage(data.choices[0].message.reasoning, 'bot'); // Asumiendo que la respuesta tiene una propiedad 'response'
            } catch (error) {
                console.error('Error al enviar mensaje al chatbot:', error);
                addMessage('Lo siento, hubo un error al conectar con el chatbot.', 'bot');
            } finally {
                loadingIndicator.classList.add('hidden'); // Ocultar indicador de carga
            }
        }

        // Mensaje de bienvenida inicial del bot
        window.onload = () => {
            addMessage('¡Hola! Soy tu asistente matemático. ¿En qué puedo ayudarte hoy?', 'bot');
        };
    </script>
</body>
</html>